swagger: '2.0'
info:
  version: '1.0'
  title: User Management  API(s)
  description: >-
    The User Management API resources are used to manage individual users and user memberships, also these resources allow you to add skills, block and unblock users, encrypt user data and also you can perform various other related tasks. 
     
    **Note:**  These resources can be used as a part of scripts or programs to allow authorized admininstators to manage the users.
  license:
    name: GNU Affero General Public License v3.0
    url: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
host: staging.open-sunbird.org
basePath: /api/user/v1
securityDefinitions:
    auth:
      type: apiKey  # arbitrary name for the security scheme
      in: header # The security scheme parameter is in "header"
      name: Authorization # name of the header, query parameter or cookie
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data
  - application/x-www-form-urlencoded
produces:
  - application/json
paths:
 /create:
    post:
      description: >-
       This API is used to create a user 
          - **_/create/_** endpoint executes the "Create User" request based on parameters provided as metadata in the request body.
          - Mandatory fields cannot be null or empty.
      summary: Create User
      tags:
      - User APIs
      operationId: Create User
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about the user to be created.
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
            
         
        schema:
           $ref: '#/definitions/CreateUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the create user API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Create User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Create User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.' 
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'RESOURSE NOT FOUND. The "Create User" operation failed ! The possible reason for failure is the requested resource is not available.' 
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /search:
    post:
      description: >-
       This API is used for searching a particular user 
          - **_/search/_** endpoint executes the "Search User" request based on parameters provided as metadata in the request body.
           - Required fields cannot be left null or empty
      summary: Search User
      tags:
      - User APIs
      operationId: Search User
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about the user to be searched.
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
        
           **Note**: You can search the user based on different user attributes
              
            - The  attributes need to be passed inside the filters of the request payload
        schema:
          $ref: '#/definitions/SearchUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the search user API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      responses:
        '200':
          description: 'OK ! Successful operation."Search User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/SearchUserResponse'
        '400':
          description: 'BAD REQUEST. The "Search User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found. requested resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/search
          headers:
            Content-Type: application/json
            Authorization: Bearer {{api_key}}
            X-Authenticated-Userid: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
          body: >-
            {
                "request": {
                    "filters":{

                      "userAttribute": ["value of user attribute , either you can pass single string or list"]

                    },
                    "limit": 500
                }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Search User
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /profile/read:
    post:
      description: >-
        This API is associated with fetching User profile on the Sunbird Platform.
          - **_/profile/read_** endpoint executes the "Get User By Login Id" request to fetch the User profile.
          - It is mandatory to provide values for required parameters
      summary: Get User by Login ID
      tags:
      - User APIs
      operationId: Get User by Login Id
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about the user to be searched.
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
        
           **Note**: 
              
            - The login ID value should ideally be username@provider, 
              
            - While creating the user if you haven't specified the provider name then your login ID would be same as username
          
          - The body contains metadata about the reading the user profile
        schema:
          $ref: '#/definitions/GetUserByLoginIdrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description:  >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the read user profile API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Fetching User profile" operation was successfully executed.'
          schema:
            $ref: '#/definitions/CreateUserSingleResp'
        '400':
          description: 'BAD REQUEST,"Fetching User profile" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found,requested resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/profile/read
          headers:
            Content-Type: application/json
            x-authenticated-user-token: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
          body: >-
            {
              "request": {
                "loginId": "test_apis_2@sunbird-integrator-test.org"
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by Login Id
        x-testDescription: create user
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /read/{User_Id}:
    parameters:
      - in: path
        name: User_Id
        type: string
        required: true
        description: 'Please append a valid User Id To the Request URL and if user need any specific values like , profile completeness ,missingFields,topic'   
    get:
      description: >-
        This API is associated with searching a specific user
          - **_/read/{User_Id}_** endpoint executes the "Fetch User profile" request. 
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Get User by User ID
      tags:
      - User APIs
      operationId: Get User by Id
      produces:
      - application/json
      parameters:
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the search specific user API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Get User by Id" operation was successfully executed.'
          schema:
            $ref: '#/definitions/CreateUserSingleResp'
        '400':
          description: 'BAD REQUEST,"Get User by Id" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /user/v1/read/{User_Id}
          headers:
            x-authenticated-user-token: '{{user_id}}'
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by Id
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false      
 /update:
    patch:
      description:  >-
        This API is associated with updating user details on the Sunbird Platform.
          - **_/update/_** endpoint executes the "Update User" request
          - It is mandatory to provide values for required parameters
      summary: Update User
      tags:
      - User APIs
      operationId: Update User
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description:  >-
          - The body payload comprises of the metadata about the user to be updated.
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
        schema:
          $ref: '#/definitions/UpdateUserrequest'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the update user API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Update User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Update User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found. The "Update User" operation failed ! The possible reason for failure is that requested resource not found. here resource is user.'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false  
 /update/logintime:
    patch:
      description: >-
         This API is used to update user login time . 
         
         - This API is called after the user successfully logs in either from portal or app. 
         
         - User login is handle by SSO(KeyCloak) , so Sunbir won't know any thing about user login time, that's why user need to make this api call after success login 
         
          - It is mandatory to provide values for required parameters
      summary: Add Users Current Login Time
      tags:
      - User APIs
      operationId: '{{host}}/user/v1/updatelogin'
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about updating the users login time in the system
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1updateloginrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the update user login time API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'

      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Login Time" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Login Time" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
            
      security:
      - auth: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /v1/user/update/logintime
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: 
          body: "{\r\n \"params\": { },\r\n    \"request\":{   \r\n      \"userId\":\"{userid}\"\r\n    }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: Add user current login time
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /role/read:
    get:
      description:  >-
       This API is used to list the assigned roles pertaining to a user
          - The **_/role/read_** endpoint executes the "read role" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Fetches User Role Information
      tags: 
      - User APIs
      operationId: V1RoleReadGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the read user role API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'

      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."Get user roles" operation was successfully executed.'
          schema:
            $ref: '#/definitions/RolesResponse'
        '400':
          description: 'BAD REQUEST. The "Get user roles" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
            
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /v1/role/read
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/data/v1/role/read'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /profile/visibility:
    post:
      description:  >-
       This API is used to configure the visibility of user profile
          - The **_/profile/visibility_** endpoint executes the "user profile visibility" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: User profile Visibility
      tags:
      - User APIs
      operationId: V1UserProfileVisibilityPost
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about the user profile visibility request
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
     
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1profile~1visibilityrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the user profile visibility API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'

      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."user profile visibility" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "user profile visibilty" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found, "user profile visibilty" operation failed ! The possible reason for failure is requested user id not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'  
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/profile/visibility
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\",\n  \n  \"private\":[\"gender\",\"location\",\"address\"],\n  \"public\":[\"private field name which you want to make public\"]\n}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/user/v1/profile/visibility'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /block:
    post:
      description:  >-
       This API is used to ban/block a user
          - The **_/block_** endpoint executes the "Block user" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Block user
      tags:
      - User APIs
      operationId: userBlock
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about blocking a user request
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
     
        schema:
          $ref: '#/definitions/blockUserReq'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the block user API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'

      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."user profile visibility" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "user profile visibilty" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found, "user profile visibilty" operation failed ! The possible reason for failure is requested user id not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'  
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/block
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\"}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /unblock:
    post:
      description: >-
       This API is used to unban/unblock a user
          - The **_/unblock_** endpoint executes the "unblock user" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: unblock user
      tags:
      - User APIs
      operationId: make deleted user active
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about unblocking a user request
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
        schema:
          $ref: '#/definitions/blockUserReq'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the unblock API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'

      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."user profile visibility" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "user profile visibilty" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found, "user profile visibilty" operation failed ! The possible reason for failure is requested user id not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'  
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/unblock
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\"}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false  
 /org/v1/role/assign:
    post:
      description:  >-
       This API is associated with assigning roles to a user
          - The **_/org/v1/role/assign_** endpoint executes the "Assign roles to a user" request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
        
        **Note:** Depending on the request payload, if you pass the userID and roles 
          
          - then the corresponding user role will be assigned to the user inside the user profile 
        
        In case the userId, organisationId and roles are passed 
          
          - then roles will be assigned by the corresponding organization for that user

      summary: Assign Role to a User
      tags:
      - User APIs
      operationId: OrgV1RoleAssignPost
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about assigninig roles to a user request
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
        schema:
          $ref: '#/definitions/{{host}}~1user~1v1~1role~1assignrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the assigning role API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."assign role" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "assign role" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
      security:
      - auth: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /encrypt:
    get:
      description: >-
       This API is associated with securing the user information with an encryption scheme  
          - The **_ /encrypt_** endpoint executes the "Encrypt User Information" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Encrypt User Information
      tags:
      - User APIs
      operationId: EncryptGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the encrypt user API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is executed multiple times'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Encrypt User Information" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Encrypt User Information" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
            
      security:
      - auth: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /skill/add:
    post:
      description: >-
       This API is used to add skill set to a user 
          - The **_/skill/add_** endpoint executes the "add user skills" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Add User Skill
      tags:
      - User APIs
      operationId: UserV1SkillAddPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about addinfg skills to a user 
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
             - XML data
        schema:
          $ref: '#/definitions/AddSkillToUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the add user skills API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."add user skills" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "add user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/skill/add
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: >2-
              {

            "request": {

                  "endorsedUserId":"userId",

                  "skillName":["ElasticSearch"]

            }

            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add skill to user
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /data/v1/skills:
    get:
      description: >-
       This API is associated with listing all user skills
          - The **_/data/v1/skills_** endpoint executes the "list all user skills" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Lists all Skills of a User
      tags:
      - User APIs
      operationId: DataV1SkillsGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
        
          Timestamp is a sequence of characters or encoded information identifying when the list user skills API call occurred, usually it gives date and time of day, sometimes accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."list user skills" operation was successfully executed.'
          schema:
            $ref: '#/definitions/skillsResp'
        '400':
          description: 'BAD REQUEST. The "list user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
            
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /data/v1/skills
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            x-authenticated-user-token: '{{user-token}}'
            Authorization: Bearer {{api-key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: provide all available skills list
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  CreateUserrequest:
    description: User object
    type: object
    allOf:
       - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
       - $ref: '#/definitions/CreateUserSingleResp'

  CreateUserSingleResp:
   description: this will hold single userObject
   type: object
   properties:
      request:
       type: object
       $ref: '#/definitions/UserReq'
 
  RolesResponse:
   description: this will hold roles api response
   type: array
   items:
    type: object
    properties:
     roles:
       type: object
       $ref: '#/definitions/Role'
  
  Role:
    description: this will contains one role object
    type: array
    items:
     type: object
     properties:
      actionGroups:
        type: object
        properties:
         name:
          type: string
         id:
          type: string
         actions:
          type: array
          items:
           type: object
           properties:
            urls:
             type: array
             items:
              type: string
  
  blockUserReq:
    description: request body for block user
    type: object
    properties:
     request:
      type: object
      properties:
       userId:
        type: string  
        description: userId 
    
  
  skillsResp:
   description: contains list of skills
   type: object
   properties:
     skills:
      type: object
      $ref: '#/definitions/Skills' 
     
     
  Skills:
    description: contains skills details
    type: array
    items:
      type: string
       
  UserReq:
    title: user object
    type: object
    properties:
          email:
            type: string
            description: 'in create user either email or phone is mandatory'
          firstName:
            type: string
          lastName:
            type: string
          password:
            type: string
          avatar:
            type: string
          language:
            type: array
            items:
             type: string
             description: any know language by user
          gender:
            type: string
          phone:
            type: string
          phoneVerified:
            type: boolean
            description: 'this key is required with value as true, if user is pass phone value and provider both. in create user either email or phone is required.'
          subject:
            type: array
            items:
             type: string
          provider:
            type: string
            description: 'value of channel, that you can get while creating rootOrg.System will get the rootOrg from provider and add that rootOrg into user profile.'
          profileSummary:
            type: string
          userName:
            type: string
          regOrgId:
            type: string
            description: 'Your registered organisation id. System will identify the root org id from your registered org id and add into your profile.'
          dob:
            type: string
            format: yyyy-MM-dd  
          grade:
            type: string
          location:
            type: string
            description: 'current location of user'
          education:
            type: array
            items:
             type : object
             $ref: "#/definitions/Education"
          profileVisibility:
            type: object
            description: it will be a map having key as any user attribute and value can be public or private. 
          address: 
            type: array
            items:
              type: object
              $ref: "#/definitions/Address"
            description: it will contains list of address object.
          jobProfile:
            type: array
            items:
              type: object
              $ref: "#/definitions/JobProfile"
          webPages:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
    required:
      - firstName
      - password 
      - email
      - userName
      - phone    
    
  User:
    title: user object
    type: object
    properties:
          id:
            type: string
          email:
            type: string
            description: 'in create user either email or phone is mandatory'
          firstName:
            type: string
          lastName:
            type: string
          password:
            type: string
          avatar:
            type: string
          language:
            type: array
            items:
             type: string
             description: any know language by user
          gender:
            type: string
          phone:
            type: string
          phoneVerified:
            type: boolean
            description: 'this key is required with value as true, if user is pass phone value and provider both. in create user either email or phone is required.'
          status:
            type: integer
            format: int32
            description: user status 
          loginId:
                type: string
                description: loginID will be generated by system based on your username and provider value. if user is passing only username then login id will be same as username , if user is passing username and provider both then login id would be username@provider. it will make same user to work with different provider based on loginId
          subject:
            type: array
            items:
             type: string
          roles:
            type: array
            items: 
             type: string
             description: user roles independent to any org. api won't access roles param. even if user pass the roles api(create or update ) will ignore it.  
          provider:
            type: string
            description: 'value of channel, that you can get while creating rootOrg'
          profileSummary:
            type: string
          userName:
            type: string
          rootOrgId:
            type: string
            description: 'ID of the rootorg'
          dob:
            type: string
            format: yyyy-MM-dd  
          grade:
            type: string
          location:
            type: string
            description: 'current location of user'
          education:
            type: object
            $ref: "#/definitions/Education"
          profileVisibility:
            type: object
            description: it will be a map having key as any user attribute and value can be public or private. 
          address: 
            type: object
            $ref: "#/definitions/Address"
            description: it will contains list of address object.
          jobProfile:
            type: object
            $ref: "#/definitions/JobProfile"
          webPages:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
    required:
      - firstName
      - lastName
      - password
      - email
      - userName
      - phone

  Address:
    title: Address
    type: object
    properties:
      addType:
        description: ''
        type: string
      addressLine1:
        description: ''
        type: string
      addressLine2:
        description: ''
        type: string
      city:
        description: ''
        type: string
      state:
        description: ''
        type: string
      zipCode:
        description: ''
        type: string
    required:
      - addType
      - addressLine1
      - city
      - state

  Education:
    title: Education
    type: object
    properties:
      degree:
        description: 'name of degree'
        type: string
      yearOfPassing:
        description: 'year of passing 2007'
        type: integer
        format: int32
      courseName:
        description: 'name of the course'
        type: string
      boardOrUniversity:
        description: 'name of board or university'
        type: string
      address:
        $ref: '#/definitions/Address'
      percentage:
        description: ''
        type: number
        format: double
      grade:
        description: 'grade name'
        type: string
    required:
      - degree
      - name
      - boardOrUniversity

  JobProfile:
    title: JobProfile
    type: object
    properties:
      jobName:
        description: 'name of the job'
        type: string
      role:
        description: 'on whcih position inside the org'
        type: string
      joiningDate:
        description: 'job joining date yyyy-MM-dd'
        type: string
      endDate:
        description: 'end date of the job yyyy-MM-dd'
        type: string
      orgId:
        description: ''
        type: string
      orgName:
        description: ''
        type: string
      subject:
        description: ''
        type: array
        items:
          type: string
      address:
        $ref: '#/definitions/Address'
    required:
      - jobName
      - role
      - joiningDate
      - orgName
      
  GetUserByLoginIdrequest:
    title: Get User by Login IdRequest

    type: object
    properties:
      request:
       allOf:
        - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
        - $ref: '#/definitions/Request50'
    required:
      - request
  Request50:
    title: Request50
    type: object
    properties:
      loginId:
        description: 'user login ID . value will be username@provider if user is created by providing username and provider both then login id would be username@provider , if user is created without provider then loginId would be username itself.'
        type: string
    required:
      - loginId
  SearchUserrequest:
    title: Search UserRequest
    example:
      request:
        query: free text search. if user wan't free text search then pass the query as string
        filters:
          userAttribute:
          - value of user attribute, it can be as string or array.
          - Ex: firstName:test  or firstName:[test,test1] 
        limit: 500
    type: object
    properties:
      request:
       allOf:
        - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
        - $ref: '#/definitions/Request18'
    required:
    - request
  Request18:
    title: Request18
    type: object
    properties:
      filters:
        $ref: '#/definitions/Filters'
      limit:
        description: ''
        type: integer
        format: int32
    required:
    - filters

  Filters:
    title: Filters
    type: object
    properties:
      userAttribute:
        description: 'userAttribute can be any attribute of user. for single attribute pass string only , if user want to get response based on same key multiple value then pass values as an array. inside filter user can pass multiple attribute with multiple values'
        type: array
        items:
          type: string
    required:
    - userAttribute
    
  UpdateUserrequest:
    title: Update UserRequest
    type: object
    properties:
      request:
       allOf:
        - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
        - $ref: '#/definitions/Request74'
    required:
    - request
  Request74:
    title: Request74
    type: object
    properties:
      userId:
        description: 'ID of the authenticated User'
        type: string
      firstName:
        description: 'Ist name of the user'
        type: string
      lastName:
        description: 'Last name of the user'
        type: string
      gender:
        description: 'Gender can Male|Female'
        type: string
      avatar:
        description: 'The profile picture of the user'
        type: string
      dob:
        description: 'Data of Birth of the user'
        type: string
      language:
        description: 'The language of the user'
        type: array
        items:
          type: string
      subject:
        description: 'An array of the parameters'
        type: array
        items:
          type: string
    required:
    - userId    
  ResultStatus:
    description: Node id description
    type: object
    properties:
      status:
       type: string
       description: Success or Failure
  ResultWithEmptyBody:
    title: The result Containing empty body
    type: object
    properties:
      result:
        $ref: '#/definitions/ResultStatus'
  SearchUserResponse:
     description: The response body of search user
     type: object
     properties:
       response:
        type: object
        properties:
         count:
          type: integer
         content:  
           type: array
           items:
            type: object
            $ref: '#/definitions/User'
  UserCreateResponse:
    description: The response body of Create Content
    type: object
    allOf:
      - $ref: '#/definitions/ResultWithEmptyBody'
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
  EmptyResult:
    title: Empty Result
    type: object
    properties:
      result:
        type: object
        description: Empty Result
  UserErrorResponse:
    title: This is response body of Create Content Error 
    type: object
    allOf:
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
      - $ref: '#/definitions/EmptyResult'
      
  '{{host}}/v1/user/updateloginrequest':
    title: '{{host}}/v1/user/updateloginRequest'
    example:
      params: {}
      request:
        userId: 9b679965-c38a-4099-a9e8-9ca89e20eab3
    type: object
    properties:
      params:
        description: ''
        type: object
      request:
        $ref: '#/definitions/Request23'
    required:
    - params
    - request
  Request23:
    title: Request23
    type: object
    properties:
      userId:
        description: 'The unique ID of the user' 
        type: string
    required:
    - userId
  '{{host}}/v1/user/profile/visibilityrequest':
    title: '{{host}}/v1/user/profile/visibilityRequest'
    example:
      request:
        userId: userid
        private:
        - gender
        - location
        - address
        public:
        - private field name which you want to make public
    type: object
    properties:
      request:
        $ref: '#/definitions/Request10'
        example:
          userId: userid
          private:
          - gender
          - location
          - address
          public:
          - private field name which you want to make public
    required:
    - request
  Request10:
    title: Request10
    example:
      userId: userid
      private:
      - gender
      - location
      - address
      public:
      - private field name which you want to make public
    type: object
    properties:
      userId:
        description: 'The unique ID of the user'
        example: userid
        type: string
      private:
        description: ''
        example:
        - gender
        - location
        - address
        type: array
        items:
          type: string
      public:
        description: ''
        example:
        - private field name which you want to make public
        type: array
        items:
          type: string
    required:
    - userId
    - private
    - public
 
  '{{host}}/user/v1/role/assignrequest':
    title: '{{host}}/user/v1/role/assignRequest'
    example:
      request:
        userId: 3d45fbd8-b911-4cc5-b503-61215902d780
        organisationId: 0123653943740170242
        roles:
        - CONTENT_CREATION
        - PUBLIC
        - CONTENT_CREATOR
        - ANNOUNCEMENT_SENDER
    type: object
    properties:
      request:
        $ref: '#/definitions/assignRoleExp'
    required:
    - request
  assignRoleExp:
    title: assignRoleExp
    example:
      userId: userid
      organisationId: 
      roles:
      - CONTENT_CREATION
      - PUBLIC
      - CONTENT_CREATOR
      - ANNOUNCEMENT_SENDER
    type: object
    properties:
      userId:
        description: 'The unique ID of the user'
        example: userid
        type: string
      organisationId:
        description: 'The unique ID of the organization'
        example: 012365
        type: string
      roles:
        description: 'The role assigned to a user'
        example:
        - CONTENT_CREATION
        - PUBLIC
        - CONTENT_CREATOR
        - ANNOUNCEMENT_SENDER
        type: array
        items:
          type: string
    required:
    - userId
    - organisationId
    - roles
    
  AddSkillToUserrequest:
    title: add skill to userRequest
    type: object
    properties:
      request:
       type: object
       properties:
         endorsedUserId:
          type: string
         skillName:
          type: array
          items:
           type: string
    required:
    - request
